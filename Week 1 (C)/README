Lecture programs:
1.) Agree - This program asks the user if they agree. If they enter y or Y, it will print "Agreed." If the user enter n or N, it will print "Not agreed." Otherwse, it will print "Invalid input."
2.) Calculator - This program asks the user for a x and a y value. It then prints the sum of x and y. 
3.) Discount - This program asks the user for the regular price as well as the percentage off. It then prints the discounted price. This can be commonly used in retail stores. 
4.) Hello - This program prints "hello, world" then asks for the user's name. It then prints "hello, user_name". 
5.) Mario - This program asks the user for the height of the block it will print. It then prints a block using # of the user's specified height. 
6.) Meow - This program prints the word "meow" 3 times using a function. 
7.) Parity - This program gets a number from the user and checks if the number is even or odd. 
8.) Pennies - This program gets a dollar amount from the user and converts it to pennies. 
9.) Points - This program gets the number fo points the user lost and compares it with the number of points lost by the "programmer" and prints out if the user lost more points, less points or same amount of points compared to the "programmer. 

pset1:
1.) Hello: Create a program in vscode that asks the user for a name and returns "hello, user_name".
2.) Mario-less: Toward the end of World 1-1 in Nintendo’s Super Mario Brothers, Mario must ascend right-aligned pyramid of blocks. Recreate that pyramid in C, albeit in text, using hashes (#) for bricks. Each hash is a bit taller than it is wide, so the pyramid itself is also be taller than it is wide.
3.) Mario-more: Toward the beginning of World 1-1 in Nintendo’s Super Mario Brothers, Mario must hop over adjacent pyramids of blocks. Recreate those pyramids in C, albeit in text, using hashes (#) for bricks. Each hash is a bit taller than it is wide, so the pyramids themselves are also be taller than they are wide.
4.) Cash: When making change, odds are you want to minimize the number of coins you’re dispensing for each customer, lest you run out (or annoy the customer!). Fortunately, computer science has given cashiers everywhere ways to minimize numbers of coins due: greedy algorithms. In cash.c, we’ve implemented most (but not all!) of a program that prompts the user for the number of cents that a customer is owed and then prints the smallest number of coins with which that change can be made. Indeed, main is already implemented for you. But notice how main calls several functions that aren’t yet implemented! Implement the functions: get_cents, calculate_quarters, calculate_dimes, calculate_nickels and calculate_pennies. 
5.) Credit: A credit (or debit) card, of course, is a plastic card with which you can pay for goods and services. Printed on that card is a number that’s also stored in a database somewhere, so that when your card is used to buy something, the creditor knows whom to bill. American Express uses 15-digit numbers, MasterCard uses 16-digit numbers, and Visa uses 13- and 16-digit numbers. All American Express numbers start with 34 or 37; most MasterCard numbers start with 51, 52, 53, 54, or 55 (they also have some other potential starting numbers which we won’t concern ourselves with for this problem); and all Visa numbers start with 4. But credit card numbers also have a “checksum” built into them, a mathematical relationship between at least one number and others. That checksum enables computers (or humans who like math) to detect typos (e.g., transpositions), if not fraudulent numbers, without having to query a database, which can be slow. Most cards use an algorithm invented by Hans Peter Luhn of IBM. According to Luhn’s algorithm, you can determine if a credit card number is (syntactically) valid. Write a program that prompts the user for a credit card number and then reports (via printf) whether it is a valid American Express, MasterCard, or Visa card number, per the definitions of each’s format herein. 
